@using Codium.Interview.EmployeeEvidenceApp.Client.Services
@using Codium.Interview.EmployeeEvidenceApp.Shared.Models.DTOs
@using Codium.Interview.EmployeeEvidenceApp.Shared.Models.Entities
@using Codium.Interview.EmployeeEvidenceApp.Shared.Models.Exceptions
@inject IPositionService positionService
@inject IEmployeeService employeeService
@inject NavigationManager NavigationManager
@inject ErrorService ErrorService


<EditForm Model="@employee" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator /> 
    <ValidationSummary /> 

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="employee.Name" required />
    </div>

    <div class="form-group">
        <label for="surname">Surname:</label>
        <InputText id="surname" class="form-control" @bind-Value="employee.Surname" required />
    </div>

    <div class="form-group">
        <label for="birthdate">Birth Date:</label>
        <InputDate id="birthdate" class="form-control" @bind-Value="employee.BirthDate" required />
    </div>

    <div class="form-group">
        <label for="position">Position:</label>
        <select id="position" class="form-control" @bind="employee.PositionID" required> 
            @if (positions == null)
            {
                <option value="">Loading...</option> 
            }
            else
            {
                <option value="">Select a position</option> 
                @foreach (var position in positions)
                {
                    <option value="@position.PositionID">@position.PositionName</option>   

                }
            }
        </select>
    </div>

    <div class="form-group">
        <label for="ip">IP address:</label>
        <InputText id="ip" class="form-control" @bind-Value="employee.IPaddress" required />
    </div>

    <button type="submit" class="btn btn-add">Add Employee</button>
</EditForm>


@code {
    private List<PositionDTO> positions;
    private EmployeeDTO employee = new EmployeeDTO() { BirthDate = DateTime.Today };


    protected override async Task OnInitializedAsync()
    {
        try
        {
            positions = await positionService.GetAllPositions();
        }
        catch (HttpResponseExeption ex)
        {

            ErrorService.ReportError((int)ex.Status, ex.Message);
            NavigationManager.NavigateTo("/error");
        }
    }

    protected async Task HandleValidSubmit()
    {
        // await EmployeeService.CreateEmployeeAsync(employee);
        
        try
        {
            employee.IPCountryCode = string.Empty;
            await employeeService.AddEmployeeAsync(employee);
            NavigationManager.NavigateTo("/employees");

        }
        catch (HttpResponseExeption ex)
        {
            ErrorService.ReportError((int)ex.Status, ex.Message);
            NavigationManager.NavigateTo("/error");
            
        }


    }
}