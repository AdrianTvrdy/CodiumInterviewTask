@page "/employees"
@using Codium.Interview.EmployeeEvidenceApp.Client.Services
@using Codium.Interview.EmployeeEvidenceApp.Shared.Models.DTOs
@using Codium.Interview.EmployeeEvidenceApp.Shared.Models.Entities
@using Codium.Interview.EmployeeEvidenceApp.Client.Components.Employee
@using Codium.Interview.EmployeeEvidenceApp.Shared.Models.Exceptions
@inject IEmployeeService employeeService
@inject NavigationManager NavigationManager
@inject ErrorService ErrorService

<div style="display: flex; align-items: center;">
    <h3>Employees</h3>
    <a href="/employees/add" class="btn btn-add" style="margin-left: auto;">
        Add employee
    </a>

</div>
<div>
    @if (employees == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table employee-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Surname</th>
                    <th>Birth Date</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in employees)
                {
                    <tr>
                        <td @onclick="@(() => selectedEmployeeID = employee.EployeeID)">@employee.Name </td>
                        <td @onclick="@(() => selectedEmployeeID = employee.EployeeID)">@employee.Surname</td>
                        <td>@employee.BirthDate.ToString("yyyy/MM/dd")</td>
                        <td><button type="button" class="btn btn-primary btn-sm" @onclick="@(() => selectedEmployeeID = employee.EployeeID)">Details</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }


</div>




@if (selectedEmployeeID is not null)
{
    <EmployeeDetail EmployeeID="selectedEmployeeID" OnClose="@(ResetVariables)" />
}



@code {
    List<EmployeeListDTO> employees;
    int? selectedEmployeeID;




    protected override async Task OnInitializedAsync()
    {
        try
        {
            employees = await employeeService.GetAllEmployees();

        }
        catch (HttpResponseExeption ex)
        {

            ErrorService.ReportError((int)ex.Status, ex.Message);
            NavigationManager.NavigateTo("/error");
        }

    }



    protected async Task ResetVariables()
    {
    
        try
        {
            selectedEmployeeID = null;
            employees = await employeeService.GetAllEmployees();
        }
        catch (HttpResponseExeption ex)
        {

            ErrorService.ReportError((int)ex.Status, ex.Message);
            NavigationManager.NavigateTo("/error");
        }
    
    }



}