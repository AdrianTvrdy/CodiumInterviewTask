@page "/upload"
@using Codium.Interview.EmployeeEvidenceApp.Client.Services
@using Codium.Interview.EmployeeEvidenceApp.Shared.Models.DTOs
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject IPositionService PositionService
@inject IEmployeeService EmployeeService
@inject ErrorService ErrorService

<h1>Upload JSON Files</h1>

<div class="row">
    <div class="col-md-6">
        <h2>Positions JSON</h2>
        <InputFile id="positions-file" OnChange="HandlePositionsFileSelected" accept=".json, directory" />
        @if (positionsFileName != null)
        {
            <p>Selected file: @positionsFileName</p>
        }
    </div>
    <div class="col-md-6">
        <h2>Employees JSON</h2>
        <InputFile id="employees-file" OnChange="HandleEmployeesFileSelected" accept=".json, directory" />
        @if (employeesFileName != null)
        {
            <p>Selected file: @employeesFileName</p>
        }
    </div>
</div>

<button class="btn btn-primary" @onclick="UploadFile" disabled="@(!positionsFileSelected && !employeesFileSelected)">Upload</button>


@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Upload Results</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-4"><strong>@positionsModalTitle</strong></div>
                        <div class="col-md-8">@positionsModalMessage</div>
                    </div>
                    <div class="row">
                        <div class="col-md-4"><strong>@employeesModalTitle</strong></div>
                        <div class="col-md-8">@employeesModalMessage</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private string? positionsFileName;
    private string? employeesFileName;
    private IBrowserFile? positionsFile;
    private IBrowserFile? employeesFile;
    private bool positionsFileSelected = false;
    private bool employeesFileSelected = false;

    private bool showModal = false;
    private string positionsModalTitle = "";
    private string positionsModalMessage = "";
    private string employeesModalTitle = "";
    private string employeesModalMessage = "";


    private async Task HandlePositionsFileSelected(InputFileChangeEventArgs e)
    {
        positionsFile = e.File;
        positionsFileName = e.File.Name;
        positionsFileSelected = true;
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('positions-file').value = ''");
    }

    private async Task HandleEmployeesFileSelected(InputFileChangeEventArgs e)
    {
        employeesFile = e.File;
        employeesFileName = e.File.Name;
        employeesFileSelected = true;
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('employees-file').value = ''");
    }

    private async Task UploadFile()
    {

        if (positionsFile == null && employeesFile == null)
        {
            return;
        }

        try
        {
            if (positionsFile != null)
            {
                await PositionService.UploadPositionsAsync(positionsFile);
            
                showModal = true;
                positionsModalTitle = "Positions JSON file uploaded";
                positionsModalMessage = "The positions JSON file has been uploaded successfully.";
            }
        }
        catch (JsonException ex)
        {

            showModal = true;
            employeesModalTitle = "Error uploading employees JSON file";
            employeesModalMessage = $"JSON deserialization error: Wrong file format";
        }
        catch (Exception ex)
        {
            showModal = true;
            employeesModalTitle = "Error uploading employees JSON file";
            employeesModalMessage = $"An error occurred: Wrong file format";
        }



        try
        {
            if (employeesFile != null)
            {
                await EmployeeService.UploadEmployeesFile(employeesFile);
            
                showModal = true;
                employeesModalTitle = "Employees JSON file uploaded";
                employeesModalMessage = "The employees JSON file has been uploaded successfully.";
            
            }
        }
        catch (JsonException ex)
        {

            showModal = true;
            employeesModalTitle = "Error uploading employees JSON file";
            employeesModalMessage = $"JSON deserialization error: Wrong file format";
        }
        catch (Exception ex)
        {
            showModal = true;
            employeesModalTitle = "Error uploading employees JSON file";
            employeesModalMessage = $"An error occurred: Wrong file format";
        }
        
        positionsFileName = null;
        employeesFileName = null;
        positionsFile = null;
        employeesFile = null;
        positionsFileSelected = false;
        employeesFileSelected = false;
    }


    private void CloseModal()
    {
        showModal = false;
        positionsModalMessage = "";
        employeesModalMessage = "";
        positionsModalTitle = "";
        employeesModalTitle = "";
    }
}